# Generated by Django 4.1.3 on 2022-12-27 18:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import post_later.models.statuses
import post_later.validators
import rules.contrib.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("post_later", "0006_mediagroup_videomedia_imagemedia"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("mast", "Mastodon"),
                            ("twitter", "Twitter"),
                            ("insta", "Instagram"),
                        ],
                        default="mast",
                        help_text="What type of social account is this?",
                        max_length=10,
                    ),
                ),
                (
                    "account_status",
                    models.CharField(
                        choices=[
                            ("pending", "Created, but not authenticated yet."),
                            ("active", "Active account"),
                            ("trash", "Pending deletion..."),
                        ],
                        default="pending",
                        help_text="Status of account.",
                        max_length=10,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Username of account",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user object that owns this instance.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountStats",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "num_posts_scheduled",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of posts scheduled for this account over all time.",
                    ),
                ),
                (
                    "num_posts_sent",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of posts successfully sent for this account.",
                    ),
                ),
                (
                    "num_threads_scheduled",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of threads scheduled for this account.",
                    ),
                ),
                (
                    "num_threads_sent",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of threads sent for this account.",
                    ),
                ),
                (
                    "account",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stats",
                        to="post_later.account",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MediaAttachment",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "media_file",
                    models.FileField(
                        help_text="Media being uploaded.",
                        upload_to=post_later.models.statuses.media_directory_path,
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of media being uploaded. Will attempt to guess from data and file extension.",
                        max_length=20,
                        verbose_name="MIME Type",
                    ),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        help_text="Generated thumbnail of image if available.",
                        null=True,
                        upload_to=post_later.models.statuses.media_thumbnail_directory_path,
                    ),
                ),
                (
                    "width",
                    models.PositiveIntegerField(
                        blank=True, help_text="Width of media if image.", null=True
                    ),
                ),
                (
                    "height",
                    models.PositiveIntegerField(
                        blank=True, help_text="Height of media if image.", null=True
                    ),
                ),
                (
                    "video_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration of video, if applicable.",
                        null=True,
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Description for visually impaired.",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "focus_x",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[post_later.validators.validate_focal_field_limit],
                    ),
                ),
                (
                    "focus_y",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[post_later.validators.validate_focal_field_limit],
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ScheduledPost",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "thread_ordering",
                    models.IntegerField(
                        default=0,
                        help_text="Used to order posts in a thread. Not used for solo posts.",
                    ),
                ),
                ("content", models.TextField(help_text="What do you want to say?")),
                (
                    "send_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Scheduled time for post. Overriden if part of a scheduled thread.",
                        null=True,
                    ),
                ),
                (
                    "post_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("error", "Error, awaiting retry."),
                            (
                                "failed",
                                "Failed to post after multiple retries. Giving up.",
                            ),
                            ("complete", "Sucessfully posted."),
                        ],
                        default="pending",
                        help_text="Status of scheduled post.",
                        max_length=10,
                    ),
                ),
                (
                    "num_failures",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of failed attempts to post."
                    ),
                ),
                (
                    "next_retry",
                    models.DateTimeField(
                        blank=True, help_text="Next time to retry to post.", null=True
                    ),
                ),
                (
                    "remote_id",
                    models.CharField(
                        blank=True,
                        help_text="Remote id of the post.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When post was successfully submitted to remote server.",
                        null=True,
                    ),
                ),
                (
                    "auto_boost_hours",
                    models.IntegerField(
                        blank=True,
                        help_text="If set, how many hours after initial post to boost this again.",
                        null=True,
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ScheduledThread",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "seconds_between_posts",
                    models.PositiveIntegerField(
                        default=60,
                        help_text="The number of seconds to wait between posting each subsequent post in the thread.",
                    ),
                ),
                (
                    "send_at",
                    models.DateTimeField(
                        help_text="When to begin publishing the thread."
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("started", "Started"),
                            ("waiting", "Awaiting Retry"),
                            ("complete", "Completed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="If publishing has started, when did it begin?",
                        null=True,
                    ),
                ),
                (
                    "next_publish",
                    models.DateTimeField(
                        blank=True,
                        help_text="If started, when will the next post publish?",
                        null=True,
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="If finished, when was it completed?",
                        null=True,
                    ),
                ),
                (
                    "start_remote_id",
                    models.CharField(
                        blank=True,
                        help_text="If publishing has begun, the first post's remote id on the service.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "next_id_to_reply",
                    models.CharField(
                        blank=True,
                        help_text="If publishing has begun, the next remote id to use for in_reply_to on the service.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "end_remote_id",
                    models.CharField(
                        blank=True,
                        help_text="If publishing is completed, the final remote id in the thread.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user object that owns this instance.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name="mediagroup",
            name="user",
        ),
        migrations.RemoveField(
            model_name="videomedia",
            name="media_group",
        ),
        migrations.RemoveField(
            model_name="videomedia",
            name="user",
        ),
        migrations.AlterField(
            model_name="mastodonavatar",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="mastodonavatar",
            name="user_account",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="avatar",
                to="post_later.mastodonuserauth",
            ),
        ),
        migrations.AlterField(
            model_name="mastodoninstanceclient",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="mastodonuserauth",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.DeleteModel(
            name="ImageMedia",
        ),
        migrations.DeleteModel(
            name="MediaGroup",
        ),
        migrations.DeleteModel(
            name="VideoMedia",
        ),
        migrations.AddField(
            model_name="scheduledpost",
            name="thread",
            field=models.ForeignKey(
                blank=True,
                help_text="The scheduled thread this post is a part of.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="posts",
                to="post_later.scheduledthread",
            ),
        ),
        migrations.AddField(
            model_name="scheduledpost",
            name="user",
            field=models.ForeignKey(
                help_text="The user object that owns this instance.",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="mediaattachment",
            name="scheduled_post",
            field=models.ForeignKey(
                blank=True,
                help_text="The scheduled post this media is attached to.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attachments",
                to="post_later.scheduledpost",
            ),
        ),
        migrations.AddField(
            model_name="mediaattachment",
            name="user",
            field=models.ForeignKey(
                help_text="The user object that owns this instance.",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
