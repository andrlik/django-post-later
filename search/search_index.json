{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Post Later A simple django app for scheduling posts for Twitter, Mastodon, and others. Free software: BSD Repository and Issue Tracker: https://github.com/andrlik/django-post-later/ Documentation: https://andrlik.github.io/django-post-later/. Features Planned Authenticate to an arbitrary number of your Twitter and Mastodon accounts. Schedule posts to either for future dates, including media uploads. Schedule RTs and Boosts. Maybe Instagram posts? I dunno. I really hate doing anything with FB. Working Nothing. This project just started, yo. Credits This package was created with Cookiecutter and the andrlik/cookiecutter-poetry-djangopackage template.","title":"Home"},{"location":"#django-post-later","text":"A simple django app for scheduling posts for Twitter, Mastodon, and others. Free software: BSD Repository and Issue Tracker: https://github.com/andrlik/django-post-later/ Documentation: https://andrlik.github.io/django-post-later/.","title":"Django Post Later"},{"location":"#features","text":"","title":"Features"},{"location":"#planned","text":"Authenticate to an arbitrary number of your Twitter and Mastodon accounts. Schedule posts to either for future dates, including media uploads. Schedule RTs and Boosts. Maybe Instagram posts? I dunno. I really hate doing anything with FB.","title":"Planned"},{"location":"#working","text":"Nothing. This project just started, yo.","title":"Working"},{"location":"#credits","text":"This package was created with Cookiecutter and the andrlik/cookiecutter-poetry-djangopackage template.","title":"Credits"},{"location":"changelog/","text":"Changelog v0.1.0 Inital Release (PENDING)","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v010","text":"Inital Release (PENDING)","title":"v0.1.0"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at daniel@andrlik.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at daniel@andrlik.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"How to contribute Contributions to either the code, localization, or the documentation are very welcome! Development task runner We use just to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running just --list . Dependencies We use poetry to manage the Python dependencies . If you don't have poetry , you should install with just poetry-download . To install dependencies and prepare pre-commit hooks you would need to run the setup command: just setup To activate your virtualenv run poetry shell . Running updates After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running just update . Codestyle After installation you may execute code formatting. just codestyle Checks Many checks are configured for this project. To run your test suite: just test To use mypy for type checking run just mypy . Command just check-codestyle will check black, isort and darglint. The just check-safety command will look at the security of your code. To run ALL checks, including test suite, codestyle, mypy, and safety: just lint Before submitting Before submitting your code please do the following steps: Add any changes you want Add tests for the new changes Edit documentation if you have changed something significant Run just codestyle to format your changes. Run just lint to ensure that types, security and docstrings are okay. Add your name to the CONTRIBUTERS.txt file. Other help You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"Contributions to either the code, localization, or the documentation are very welcome!","title":"How to contribute"},{"location":"contributing/#development-task-runner","text":"We use just to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running just --list .","title":"Development task runner"},{"location":"contributing/#dependencies","text":"We use poetry to manage the Python dependencies . If you don't have poetry , you should install with just poetry-download . To install dependencies and prepare pre-commit hooks you would need to run the setup command: just setup To activate your virtualenv run poetry shell .","title":"Dependencies"},{"location":"contributing/#running-updates","text":"After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running just update .","title":"Running updates"},{"location":"contributing/#codestyle","text":"After installation you may execute code formatting. just codestyle","title":"Codestyle"},{"location":"contributing/#checks","text":"Many checks are configured for this project. To run your test suite: just test To use mypy for type checking run just mypy . Command just check-codestyle will check black, isort and darglint. The just check-safety command will look at the security of your code. To run ALL checks, including test suite, codestyle, mypy, and safety: just lint","title":"Checks"},{"location":"contributing/#before-submitting","text":"Before submitting your code please do the following steps: Add any changes you want Add tests for the new changes Edit documentation if you have changed something significant Run just codestyle to format your changes. Run just lint to ensure that types, security and docstrings are okay. Add your name to the CONTRIBUTERS.txt file.","title":"Before submitting"},{"location":"contributing/#other-help","text":"You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.","title":"Other help"},{"location":"models/","text":"Here you'll find the models that Post Later uses to manage data. Mastodon Models MastodonInstanceClient Bases: TimeStampedModel , RulesModel Represents a single mastodon instance with it's client credentials and base api url. Attributes: Name Type Description api_base_url str The base URL for the Mastodon instance. We create a unique client for each URL. client_id str | None The client_id given to us by the remote instance. client_secret str | None The client secret given to us by the remote instance. vapid_key str | None The streaming key returned by the instance. Source code in post_later/models/mastodon.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class MastodonInstanceClient ( TimeStampedModel , RulesModel ): \"\"\" Represents a single mastodon instance with it's client credentials and base api url. Attributes: api_base_url (str): The base URL for the Mastodon instance. We create a unique client for each URL. client_id (str | None): The client_id given to us by the remote instance. client_secret (str | None): The client secret given to us by the remote instance. vapid_key (str | None): The streaming key returned by the instance. \"\"\" api_base_url = models . URLField ( unique = True , help_text = _ ( \"Unique url for instance, e.g. https://mastodon.social\" ), ) client_id = models . CharField ( \"Client Id\" , max_length = 100 , help_text = _ ( \"Unique client id for instance.\" ), null = True , blank = True , ) client_secret = models . CharField ( \"Client Secret\" , max_length = 100 , help_text = _ ( \"Client secret token for instance.\" ), null = True , blank = True , ) vapid_key = models . CharField ( \"Vapid Key\" , max_length = 250 , blank = True , null = True , help_text = _ ( \"Optional. Vapid key for use in receiving push notifications is server supports it.\" ), ) @property def ready ( self ) -> bool : \"\"\"Returns a bool indicating whether the client id and secret are ready for use.\"\"\" if self . client_id is not None and self . client_secret is not None : return True return False def __str__ ( self ): # pragma: nocover return f \" { self . api_base_url } -Key:( { self . client_id } )\" ready () property Returns a bool indicating whether the client id and secret are ready for use. Source code in post_later/models/mastodon.py 59 60 61 62 63 64 @property def ready ( self ) -> bool : \"\"\"Returns a bool indicating whether the client id and secret are ready for use.\"\"\" if self . client_id is not None and self . client_secret is not None : return True return False MastodonUserAuth Bases: TimeStampedModel , RulesModel A user's authentication for given Mastodon account. Only the associated user can see, edit, or delete this object. Attributes: Name Type Description instance_client MastodonInstanceClient Foreign key to our defined app for a given instance. account_username str | None The username for the account. Fetched from instance. user User Foreign key to the AUTH_USER_MODEL . user_oauth_key str | None The oauth user key given by the instance. user_auth_token str | None The auth token used for credentially on all subsequent user requests. Source code in post_later/models/mastodon.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class MastodonUserAuth ( TimeStampedModel , RulesModel ): \"\"\" A user's authentication for given Mastodon account. Only the associated user can see, edit, or delete this object. Attributes: instance_client (MastodonInstanceClient): Foreign key to our defined app for a given instance. account_username (str | None): The username for the account. Fetched from instance. user (User): Foreign key to the `AUTH_USER_MODEL`. user_oauth_key (str | None): The oauth user key given by the instance. user_auth_token (str | None): The auth token used for credentially on all subsequent user requests. \"\"\" instance_client = models . ForeignKey ( MastodonInstanceClient , on_delete = models . CASCADE ) account_username = models . CharField ( max_length = 100 , null = True , blank = True ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) user_oauth_key = models . CharField ( max_length = 250 , null = True , blank = True , help_text = _ ( \"Users OAuth code.\" ) ) user_auth_token = models . CharField ( max_length = 250 , null = True , blank = True , help_text = _ ( \"Current auth token for user session.\" ), ) @property def is_ready_post ( self ) -> bool : \"\"\" Returns a bool representing whether this has all the values needed to post. \"\"\" if ( self . account_username is not None and self . user_oauth_key is not None and self . user_auth_token is not None ): return True return False def __str__ ( self ): # pragma: nocover return f \" { self . user } - @ { self . account_username } @ { self . instance_client . api_base_url [ 8 :] } \" class Meta : rules_permissions = { \"add\" : is_valid_user , \"read\" : is_mastodon_user , \"edit\" : is_mastodon_user , \"delete\" : is_mastodon_user , \"list\" : is_valid_user , } is_ready_post () property Returns a bool representing whether this has all the values needed to post. Source code in post_later/models/mastodon.py 166 167 168 169 170 171 172 173 174 175 176 177 @property def is_ready_post ( self ) -> bool : \"\"\" Returns a bool representing whether this has all the values needed to post. \"\"\" if ( self . account_username is not None and self . user_oauth_key is not None and self . user_auth_token is not None ): return True return False MastodonAvatar Bases: TimeStampedModel , RulesModel Represents the avatar associated with a given Mastodon account. Attributes: Name Type Description source_url str The URL of the static avatar image on the remote instance. cached_avatar file | None Our locally cached version of the remote image. Fetched asyncronously. cache_stale bool Indicates if the cache is stale and needs to be refreshed from remote instance. user_account MastodonUserAuth OneToOne relationship to MastodonUserAuth. Source code in post_later/models/mastodon.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class MastodonAvatar ( TimeStampedModel , RulesModel ): \"\"\" Represents the avatar associated with a given Mastodon account. Attributes: source_url (str): The URL of the static avatar image on the remote instance. cached_avatar (file | None): Our locally cached version of the remote image. Fetched asyncronously. cache_stale (bool): Indicates if the cache is stale and needs to be refreshed from remote instance. user_account (MastodonUserAuth): OneToOne relationship to MastodonUserAuth. \"\"\" source_url = models . URLField ( null = True , blank = True , help_text = _ ( \"Original URL from mastodon instance.\" ) ) cached_avatar = models . ImageField ( null = True , blank = True , upload_to = mastodon_account_directory_path , help_text = _ ( \"Locally cached version of avatar.\" ), ) cache_stale = models . BooleanField ( default = True , help_text = _ ( \"Should we refresh the cached image at next opportunity?\" ), ) user_account = models . OneToOneField ( \"MastodonUserAuth\" , on_delete = models . CASCADE ) def __str__ ( self ): # pragma: nocover return f \" { self . user_account . account_username } - { self . id } - Stale: { self . cache_stale } \" @property def img_url ( self ): \"\"\" Returns cached avatar url if exists, source url if not. \"\"\" if self . cache_stale or self . cached_avatar is None : return self . source_url return self . cached_avatar . url def get_avatar ( self ): \"\"\" Calls the async fetch of avatar and saves results to model. \"\"\" img_fetch = async_to_sync ( self . fetch_avatar ) img = img_fetch () if img is not None : self . cached_avatar = img self . cache_stale = False self . save () async def fetch_avatar ( self ): \"\"\" Fetches the current avatar from remote server. \"\"\" if self . cache_stale and self . source_url is not None : async with httpx . AsyncClient () as client : new_img_response = await client . get ( self . source_url ) if new_img_response . status_code == 200 : new_img = File ( BytesIO ( new_img_response . content ), name = f \" { self . id } _cached_avatar\" ) return new_img return None # pragma: nocover get_avatar () Calls the async fetch of avatar and saves results to model. Source code in post_later/models/mastodon.py 112 113 114 115 116 117 118 119 120 121 def get_avatar ( self ): \"\"\" Calls the async fetch of avatar and saves results to model. \"\"\" img_fetch = async_to_sync ( self . fetch_avatar ) img = img_fetch () if img is not None : self . cached_avatar = img self . cache_stale = False self . save () fetch_avatar () async Fetches the current avatar from remote server. Source code in post_later/models/mastodon.py 123 124 125 126 127 128 129 130 131 132 133 134 135 async def fetch_avatar ( self ): \"\"\" Fetches the current avatar from remote server. \"\"\" if self . cache_stale and self . source_url is not None : async with httpx . AsyncClient () as client : new_img_response = await client . get ( self . source_url ) if new_img_response . status_code == 200 : new_img = File ( BytesIO ( new_img_response . content ), name = f \" { self . id } _cached_avatar\" ) return new_img return None # pragma: nocover img_url () property Returns cached avatar url if exists, source url if not. Source code in post_later/models/mastodon.py 103 104 105 106 107 108 109 110 @property def img_url ( self ): \"\"\" Returns cached avatar url if exists, source url if not. \"\"\" if self . cache_stale or self . cached_avatar is None : return self . source_url return self . cached_avatar . url","title":"Models"},{"location":"models/#mastodon-models","text":"","title":"Mastodon Models"},{"location":"models/#mastodoninstanceclient","text":"Bases: TimeStampedModel , RulesModel Represents a single mastodon instance with it's client credentials and base api url. Attributes: Name Type Description api_base_url str The base URL for the Mastodon instance. We create a unique client for each URL. client_id str | None The client_id given to us by the remote instance. client_secret str | None The client secret given to us by the remote instance. vapid_key str | None The streaming key returned by the instance. Source code in post_later/models/mastodon.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class MastodonInstanceClient ( TimeStampedModel , RulesModel ): \"\"\" Represents a single mastodon instance with it's client credentials and base api url. Attributes: api_base_url (str): The base URL for the Mastodon instance. We create a unique client for each URL. client_id (str | None): The client_id given to us by the remote instance. client_secret (str | None): The client secret given to us by the remote instance. vapid_key (str | None): The streaming key returned by the instance. \"\"\" api_base_url = models . URLField ( unique = True , help_text = _ ( \"Unique url for instance, e.g. https://mastodon.social\" ), ) client_id = models . CharField ( \"Client Id\" , max_length = 100 , help_text = _ ( \"Unique client id for instance.\" ), null = True , blank = True , ) client_secret = models . CharField ( \"Client Secret\" , max_length = 100 , help_text = _ ( \"Client secret token for instance.\" ), null = True , blank = True , ) vapid_key = models . CharField ( \"Vapid Key\" , max_length = 250 , blank = True , null = True , help_text = _ ( \"Optional. Vapid key for use in receiving push notifications is server supports it.\" ), ) @property def ready ( self ) -> bool : \"\"\"Returns a bool indicating whether the client id and secret are ready for use.\"\"\" if self . client_id is not None and self . client_secret is not None : return True return False def __str__ ( self ): # pragma: nocover return f \" { self . api_base_url } -Key:( { self . client_id } )\"","title":"MastodonInstanceClient"},{"location":"models/#post_later.models.mastodon.MastodonInstanceClient.ready","text":"Returns a bool indicating whether the client id and secret are ready for use. Source code in post_later/models/mastodon.py 59 60 61 62 63 64 @property def ready ( self ) -> bool : \"\"\"Returns a bool indicating whether the client id and secret are ready for use.\"\"\" if self . client_id is not None and self . client_secret is not None : return True return False","title":"ready()"},{"location":"models/#mastodonuserauth","text":"Bases: TimeStampedModel , RulesModel A user's authentication for given Mastodon account. Only the associated user can see, edit, or delete this object. Attributes: Name Type Description instance_client MastodonInstanceClient Foreign key to our defined app for a given instance. account_username str | None The username for the account. Fetched from instance. user User Foreign key to the AUTH_USER_MODEL . user_oauth_key str | None The oauth user key given by the instance. user_auth_token str | None The auth token used for credentially on all subsequent user requests. Source code in post_later/models/mastodon.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class MastodonUserAuth ( TimeStampedModel , RulesModel ): \"\"\" A user's authentication for given Mastodon account. Only the associated user can see, edit, or delete this object. Attributes: instance_client (MastodonInstanceClient): Foreign key to our defined app for a given instance. account_username (str | None): The username for the account. Fetched from instance. user (User): Foreign key to the `AUTH_USER_MODEL`. user_oauth_key (str | None): The oauth user key given by the instance. user_auth_token (str | None): The auth token used for credentially on all subsequent user requests. \"\"\" instance_client = models . ForeignKey ( MastodonInstanceClient , on_delete = models . CASCADE ) account_username = models . CharField ( max_length = 100 , null = True , blank = True ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) user_oauth_key = models . CharField ( max_length = 250 , null = True , blank = True , help_text = _ ( \"Users OAuth code.\" ) ) user_auth_token = models . CharField ( max_length = 250 , null = True , blank = True , help_text = _ ( \"Current auth token for user session.\" ), ) @property def is_ready_post ( self ) -> bool : \"\"\" Returns a bool representing whether this has all the values needed to post. \"\"\" if ( self . account_username is not None and self . user_oauth_key is not None and self . user_auth_token is not None ): return True return False def __str__ ( self ): # pragma: nocover return f \" { self . user } - @ { self . account_username } @ { self . instance_client . api_base_url [ 8 :] } \" class Meta : rules_permissions = { \"add\" : is_valid_user , \"read\" : is_mastodon_user , \"edit\" : is_mastodon_user , \"delete\" : is_mastodon_user , \"list\" : is_valid_user , }","title":"MastodonUserAuth"},{"location":"models/#post_later.models.mastodon.MastodonUserAuth.is_ready_post","text":"Returns a bool representing whether this has all the values needed to post. Source code in post_later/models/mastodon.py 166 167 168 169 170 171 172 173 174 175 176 177 @property def is_ready_post ( self ) -> bool : \"\"\" Returns a bool representing whether this has all the values needed to post. \"\"\" if ( self . account_username is not None and self . user_oauth_key is not None and self . user_auth_token is not None ): return True return False","title":"is_ready_post()"},{"location":"models/#mastodonavatar","text":"Bases: TimeStampedModel , RulesModel Represents the avatar associated with a given Mastodon account. Attributes: Name Type Description source_url str The URL of the static avatar image on the remote instance. cached_avatar file | None Our locally cached version of the remote image. Fetched asyncronously. cache_stale bool Indicates if the cache is stale and needs to be refreshed from remote instance. user_account MastodonUserAuth OneToOne relationship to MastodonUserAuth. Source code in post_later/models/mastodon.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class MastodonAvatar ( TimeStampedModel , RulesModel ): \"\"\" Represents the avatar associated with a given Mastodon account. Attributes: source_url (str): The URL of the static avatar image on the remote instance. cached_avatar (file | None): Our locally cached version of the remote image. Fetched asyncronously. cache_stale (bool): Indicates if the cache is stale and needs to be refreshed from remote instance. user_account (MastodonUserAuth): OneToOne relationship to MastodonUserAuth. \"\"\" source_url = models . URLField ( null = True , blank = True , help_text = _ ( \"Original URL from mastodon instance.\" ) ) cached_avatar = models . ImageField ( null = True , blank = True , upload_to = mastodon_account_directory_path , help_text = _ ( \"Locally cached version of avatar.\" ), ) cache_stale = models . BooleanField ( default = True , help_text = _ ( \"Should we refresh the cached image at next opportunity?\" ), ) user_account = models . OneToOneField ( \"MastodonUserAuth\" , on_delete = models . CASCADE ) def __str__ ( self ): # pragma: nocover return f \" { self . user_account . account_username } - { self . id } - Stale: { self . cache_stale } \" @property def img_url ( self ): \"\"\" Returns cached avatar url if exists, source url if not. \"\"\" if self . cache_stale or self . cached_avatar is None : return self . source_url return self . cached_avatar . url def get_avatar ( self ): \"\"\" Calls the async fetch of avatar and saves results to model. \"\"\" img_fetch = async_to_sync ( self . fetch_avatar ) img = img_fetch () if img is not None : self . cached_avatar = img self . cache_stale = False self . save () async def fetch_avatar ( self ): \"\"\" Fetches the current avatar from remote server. \"\"\" if self . cache_stale and self . source_url is not None : async with httpx . AsyncClient () as client : new_img_response = await client . get ( self . source_url ) if new_img_response . status_code == 200 : new_img = File ( BytesIO ( new_img_response . content ), name = f \" { self . id } _cached_avatar\" ) return new_img return None # pragma: nocover","title":"MastodonAvatar"},{"location":"models/#post_later.models.mastodon.MastodonAvatar.get_avatar","text":"Calls the async fetch of avatar and saves results to model. Source code in post_later/models/mastodon.py 112 113 114 115 116 117 118 119 120 121 def get_avatar ( self ): \"\"\" Calls the async fetch of avatar and saves results to model. \"\"\" img_fetch = async_to_sync ( self . fetch_avatar ) img = img_fetch () if img is not None : self . cached_avatar = img self . cache_stale = False self . save ()","title":"get_avatar()"},{"location":"models/#post_later.models.mastodon.MastodonAvatar.fetch_avatar","text":"Fetches the current avatar from remote server. Source code in post_later/models/mastodon.py 123 124 125 126 127 128 129 130 131 132 133 134 135 async def fetch_avatar ( self ): \"\"\" Fetches the current avatar from remote server. \"\"\" if self . cache_stale and self . source_url is not None : async with httpx . AsyncClient () as client : new_img_response = await client . get ( self . source_url ) if new_img_response . status_code == 200 : new_img = File ( BytesIO ( new_img_response . content ), name = f \" { self . id } _cached_avatar\" ) return new_img return None # pragma: nocover","title":"fetch_avatar()"},{"location":"models/#post_later.models.mastodon.MastodonAvatar.img_url","text":"Returns cached avatar url if exists, source url if not. Source code in post_later/models/mastodon.py 103 104 105 106 107 108 109 110 @property def img_url ( self ): \"\"\" Returns cached avatar url if exists, source url if not. \"\"\" if self . cache_stale or self . cached_avatar is None : return self . source_url return self . cached_avatar . url","title":"img_url()"},{"location":"quickstart/","text":"Quickstart A simple django app for scheduling posts for Twitter, Mastodon, and others. Installation Add your installation instructions here. Usage Add practical usage stuff here.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"A simple django app for scheduling posts for Twitter, Mastodon, and others.","title":"Quickstart"},{"location":"quickstart/#installation","text":"Add your installation instructions here.","title":"Installation"},{"location":"quickstart/#usage","text":"Add practical usage stuff here.","title":"Usage"},{"location":"security/","text":"Security \ud83d\udd10 Reporting Security Issues Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge. Vulnerabilities can be reported by emailing core members: Daniel Andrlik daniel@andrlik.org Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Environment (e.g. Linux / Windows / macOS) Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. Preferred Languages We prefer all communications to be in English.","title":"Security"},{"location":"security/#security","text":"","title":"Security"},{"location":"security/#reporting-security-issues","text":"Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge. Vulnerabilities can be reported by emailing core members: Daniel Andrlik daniel@andrlik.org Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Environment (e.g. Linux / Windows / macOS) Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly.","title":"\ud83d\udd10 Reporting Security Issues"},{"location":"security/#preferred-languages","text":"We prefer all communications to be in English.","title":"Preferred Languages"},{"location":"views/","text":"Views for Post Later are documented below. Mastodon Account Management The flow for linking a new Mastodon account is as follows. The user navigates to MastodonAccountAddView and is prompted to enter the URL for their Mastodon instance. Post Later either retrieves an existing client for that instance, or creates a new one, and then redirects to that instances OAuth Authorization page. The Mastodon instance then redirects the user to HandleMastodonAuthView which saves the OAuth token and redirects to MastodonLoginView . MastodonLoginView sends a request for an auth token from the Mastodon instance and saves it. At this point, the account is fully authorized, and it submits a request for screenname and avatar information to save accordingly. This should also trigger the async fetch of the cached avatar file, but this is not implemented yet . The user is then redirected to MastodonAccountDetailView . MastodonAccountAddView Bases: LoginRequiredMixin , FormView A view that enables users to connect another Mastodon account to their profile. It should take the intial values of the api_base_url and then get_or_create a client and start the OAuth Flow. It will attempt to create a new app on the remote instance if needed and store the resulting client_id and client_secret returned. If successful, redirects to remote instance to start OAuth approval by user. Source code in post_later/views/mastodon.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class MastodonAccountAddView ( LoginRequiredMixin , FormView ): \"\"\" A view that enables users to connect another Mastodon account to their profile. It should take the intial values of the api_base_url and then get_or_create a client and start the OAuth Flow. It will attempt to create a new app on the remote instance if needed and store the resulting client_id and client_secret returned. If successful, redirects to remote instance to start OAuth approval by user. \"\"\" form_class = LinkMastodonAccountForm template_name = \"post_later/mastodon/link_account.html\" def form_valid ( self , form ): url = form . cleaned_data [ \"instance_url\" ] with transaction . atomic (): client , created = MastodonInstanceClient . objects . get_or_create ( api_base_url = url ) userauth = MastodonUserAuth . objects . create ( instance_client = client , user = self . request . user ) redirect_url = reverse_lazy ( \"post_later:mastodon_handle_auth\" , kwargs = { \"id\" : userauth . id } ) if created or not client . ready : # This one isn't actually registered with the instance. client_key , client_secret = Mastodon . create_app ( client_name = \"Post Later\" , api_base_url = url , redirect_uris = redirect_url , ) client . client_id = client_key client . client_secret = client_secret client . save () mclient = Mastodon ( api_base_url = url , client_id = client . client_id , client_secret = client . client_secret , ) return HttpResponseRedirect ( mclient . auth_request_url ( redirect_uris = redirect_url ) ) HandleMastodonAuthView Bases: LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView Given the response from a Mastodon instance set the oauth key, and redirect to MastodonLoginView to finish authenticating the user. Displays an error message if no oauth key is returned. Source code in post_later/views/mastodon.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class HandleMastodonAuthView ( LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView ): \"\"\" Given the response from a Mastodon instance set the oauth key, and redirect to `MastodonLoginView` to finish authenticating the user. Displays an error message if no oauth key is returned. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodonavatar\" ] code : str | None = None context_object_name = \"auth_object\" template_name = \"post_later/mastodon/mastodon_error.html\" mastodon_error_text = None permission_required = \"post_later.edit_mastodonuserauth\" def dispatch ( self , request , * args , ** kwargs ): self . code = request . GET . get ( \"code\" , None ) return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request , * args , ** kwargs ): self . object = self . get_object () if self . code is not None : self . object . user_oauth_key = self . code self . object . user_auth_token = None self . object . save () return HttpResponseRedirect ( reverse_lazy ( \"post_later:mastodon_account_login\" , kwargs = { \"id\" : self . object . id } ) ) else : self . mastodon_error_text = _ ( \"Your mastodon server did not return an authorization code.\" ) return super () . get ( request , * args , ** kwargs ) MastodonLoginView Bases: LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView Requests an auth token from the Mastodon instance and saves it to MastodonUserAuth . Then redirects to MastodonAccountDetailView . Otherwise, displays the error message received from Mastodon. Source code in post_later/views/mastodon.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class MastodonLoginView ( LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView ): \"\"\" Requests an auth token from the Mastodon instance and saves it to `MastodonUserAuth`. Then redirects to `MastodonAccountDetailView`. Otherwise, displays the error message received from Mastodon. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodonavatar\" ] auth_token = None template_name = \"post_later/mastodon/mastodon_error.html\" mastodon_error_text = None context_object_name = \"userauth\" permission_required = \"post_later.edit_mastodonuserauth\" def get ( self , request , * args , ** kwargs ): self . object = self . get_object () mclient = Mastodon ( client_id = self . object . instance_client . client_id , client_secret = self . object . instance_client . client_secret , api_base_url = self . object . instance_client . api_base_url , ) try : access_token = mclient . log_in ( code = self . object . user_oauth_key ) self . object . user_auth_token = access_token mclient = Mastodon ( access_token = self . object . user_auth_token , api_base_url = self . object . instance_client . api_base_url , ) user_info = mclient . me () self . object . account_username = user_info [ \"acct\" ] self . object . save () avatar , created = MastodonAvatar . objects . get_or_create ( user_account = self . object ) if created or avatar . source_url != user_info [ \"avatar_static\" ]: avatar . source_url = user_info [ \"avatar_static\" ] avatar . cache_stale = True avatar . save () return HttpResponseRedirect ( reverse_lazy ( \"post_later:mastodon_account_detail\" , kwargs = { \"id\" : self . object . id } ) ) except MastodonError as eme : self . mastodon_error_text = f \"Mastodon Error: { eme } \" return super () . get ( request , * args , ** kwargs ) def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"mastodon_error\" ] = self . mastodon_error_text return context MastodonAccountDetailView Bases: LoginRequiredMixin , PermissionRequiredMixin , DetailView Detail view for the given account record. Source code in post_later/views/mastodon.py 165 166 167 168 169 170 171 172 173 174 175 176 177 class MastodonAccountDetailView ( LoginRequiredMixin , PermissionRequiredMixin , DetailView ): \"\"\" Detail view for the given account record. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_detail.html\" permission_required = \"post_later.read_mastodonuserauth\" context_object_name = \"userauth\" MastodonAccountListView Bases: LoginRequiredMixin , ListView Shows a list of the connected Mastodon accounts associated with the logged in user. Source code in post_later/views/mastodon.py 180 181 182 183 184 185 186 187 188 189 190 191 192 class MastodonAccountListView ( LoginRequiredMixin , ListView ): \"\"\" Shows a list of the connected Mastodon accounts associated with the logged in user. \"\"\" model = MastodonUserAuth select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_list.html\" context_object_name = \"accounts\" def get_queryset ( self , * args , ** kwargs ): return self . model . objects . filter ( user = self . request . user ) MastodonAccountDeleteView Bases: LoginRequiredMixin , PermissionRequiredMixin , DeleteView Allows the user to delete the given linked Mastodon account if they own it. Source code in post_later/views/mastodon.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 class MastodonAccountDeleteView ( # type: ignore LoginRequiredMixin , PermissionRequiredMixin , DeleteView ): \"\"\" Allows the user to delete the given linked Mastodon account if they own it. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_delete.html\" permission_required = \"post_later.delete_mastodonuserauth\" context_object_name = \"userauth\" def get_success_url ( self ): return reverse_lazy ( \"post_later:mastodon_account_list\" )","title":"Views"},{"location":"views/#mastodon-account-management","text":"The flow for linking a new Mastodon account is as follows. The user navigates to MastodonAccountAddView and is prompted to enter the URL for their Mastodon instance. Post Later either retrieves an existing client for that instance, or creates a new one, and then redirects to that instances OAuth Authorization page. The Mastodon instance then redirects the user to HandleMastodonAuthView which saves the OAuth token and redirects to MastodonLoginView . MastodonLoginView sends a request for an auth token from the Mastodon instance and saves it. At this point, the account is fully authorized, and it submits a request for screenname and avatar information to save accordingly. This should also trigger the async fetch of the cached avatar file, but this is not implemented yet . The user is then redirected to MastodonAccountDetailView .","title":"Mastodon Account Management"},{"location":"views/#mastodonaccountaddview","text":"Bases: LoginRequiredMixin , FormView A view that enables users to connect another Mastodon account to their profile. It should take the intial values of the api_base_url and then get_or_create a client and start the OAuth Flow. It will attempt to create a new app on the remote instance if needed and store the resulting client_id and client_secret returned. If successful, redirects to remote instance to start OAuth approval by user. Source code in post_later/views/mastodon.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class MastodonAccountAddView ( LoginRequiredMixin , FormView ): \"\"\" A view that enables users to connect another Mastodon account to their profile. It should take the intial values of the api_base_url and then get_or_create a client and start the OAuth Flow. It will attempt to create a new app on the remote instance if needed and store the resulting client_id and client_secret returned. If successful, redirects to remote instance to start OAuth approval by user. \"\"\" form_class = LinkMastodonAccountForm template_name = \"post_later/mastodon/link_account.html\" def form_valid ( self , form ): url = form . cleaned_data [ \"instance_url\" ] with transaction . atomic (): client , created = MastodonInstanceClient . objects . get_or_create ( api_base_url = url ) userauth = MastodonUserAuth . objects . create ( instance_client = client , user = self . request . user ) redirect_url = reverse_lazy ( \"post_later:mastodon_handle_auth\" , kwargs = { \"id\" : userauth . id } ) if created or not client . ready : # This one isn't actually registered with the instance. client_key , client_secret = Mastodon . create_app ( client_name = \"Post Later\" , api_base_url = url , redirect_uris = redirect_url , ) client . client_id = client_key client . client_secret = client_secret client . save () mclient = Mastodon ( api_base_url = url , client_id = client . client_id , client_secret = client . client_secret , ) return HttpResponseRedirect ( mclient . auth_request_url ( redirect_uris = redirect_url ) )","title":"MastodonAccountAddView"},{"location":"views/#handlemastodonauthview","text":"Bases: LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView Given the response from a Mastodon instance set the oauth key, and redirect to MastodonLoginView to finish authenticating the user. Displays an error message if no oauth key is returned. Source code in post_later/views/mastodon.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class HandleMastodonAuthView ( LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView ): \"\"\" Given the response from a Mastodon instance set the oauth key, and redirect to `MastodonLoginView` to finish authenticating the user. Displays an error message if no oauth key is returned. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodonavatar\" ] code : str | None = None context_object_name = \"auth_object\" template_name = \"post_later/mastodon/mastodon_error.html\" mastodon_error_text = None permission_required = \"post_later.edit_mastodonuserauth\" def dispatch ( self , request , * args , ** kwargs ): self . code = request . GET . get ( \"code\" , None ) return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request , * args , ** kwargs ): self . object = self . get_object () if self . code is not None : self . object . user_oauth_key = self . code self . object . user_auth_token = None self . object . save () return HttpResponseRedirect ( reverse_lazy ( \"post_later:mastodon_account_login\" , kwargs = { \"id\" : self . object . id } ) ) else : self . mastodon_error_text = _ ( \"Your mastodon server did not return an authorization code.\" ) return super () . get ( request , * args , ** kwargs )","title":"HandleMastodonAuthView"},{"location":"views/#mastodonloginview","text":"Bases: LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView Requests an auth token from the Mastodon instance and saves it to MastodonUserAuth . Then redirects to MastodonAccountDetailView . Otherwise, displays the error message received from Mastodon. Source code in post_later/views/mastodon.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class MastodonLoginView ( LoginRequiredMixin , PermissionRequiredMixin , SingleObjectMixin , TemplateView ): \"\"\" Requests an auth token from the Mastodon instance and saves it to `MastodonUserAuth`. Then redirects to `MastodonAccountDetailView`. Otherwise, displays the error message received from Mastodon. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodonavatar\" ] auth_token = None template_name = \"post_later/mastodon/mastodon_error.html\" mastodon_error_text = None context_object_name = \"userauth\" permission_required = \"post_later.edit_mastodonuserauth\" def get ( self , request , * args , ** kwargs ): self . object = self . get_object () mclient = Mastodon ( client_id = self . object . instance_client . client_id , client_secret = self . object . instance_client . client_secret , api_base_url = self . object . instance_client . api_base_url , ) try : access_token = mclient . log_in ( code = self . object . user_oauth_key ) self . object . user_auth_token = access_token mclient = Mastodon ( access_token = self . object . user_auth_token , api_base_url = self . object . instance_client . api_base_url , ) user_info = mclient . me () self . object . account_username = user_info [ \"acct\" ] self . object . save () avatar , created = MastodonAvatar . objects . get_or_create ( user_account = self . object ) if created or avatar . source_url != user_info [ \"avatar_static\" ]: avatar . source_url = user_info [ \"avatar_static\" ] avatar . cache_stale = True avatar . save () return HttpResponseRedirect ( reverse_lazy ( \"post_later:mastodon_account_detail\" , kwargs = { \"id\" : self . object . id } ) ) except MastodonError as eme : self . mastodon_error_text = f \"Mastodon Error: { eme } \" return super () . get ( request , * args , ** kwargs ) def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"mastodon_error\" ] = self . mastodon_error_text return context","title":"MastodonLoginView"},{"location":"views/#mastodonaccountdetailview","text":"Bases: LoginRequiredMixin , PermissionRequiredMixin , DetailView Detail view for the given account record. Source code in post_later/views/mastodon.py 165 166 167 168 169 170 171 172 173 174 175 176 177 class MastodonAccountDetailView ( LoginRequiredMixin , PermissionRequiredMixin , DetailView ): \"\"\" Detail view for the given account record. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_detail.html\" permission_required = \"post_later.read_mastodonuserauth\" context_object_name = \"userauth\"","title":"MastodonAccountDetailView"},{"location":"views/#mastodonaccountlistview","text":"Bases: LoginRequiredMixin , ListView Shows a list of the connected Mastodon accounts associated with the logged in user. Source code in post_later/views/mastodon.py 180 181 182 183 184 185 186 187 188 189 190 191 192 class MastodonAccountListView ( LoginRequiredMixin , ListView ): \"\"\" Shows a list of the connected Mastodon accounts associated with the logged in user. \"\"\" model = MastodonUserAuth select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_list.html\" context_object_name = \"accounts\" def get_queryset ( self , * args , ** kwargs ): return self . model . objects . filter ( user = self . request . user )","title":"MastodonAccountListView"},{"location":"views/#mastodonaccountdeleteview","text":"Bases: LoginRequiredMixin , PermissionRequiredMixin , DeleteView Allows the user to delete the given linked Mastodon account if they own it. Source code in post_later/views/mastodon.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 class MastodonAccountDeleteView ( # type: ignore LoginRequiredMixin , PermissionRequiredMixin , DeleteView ): \"\"\" Allows the user to delete the given linked Mastodon account if they own it. \"\"\" model = MastodonUserAuth pk_url_kwarg = \"id\" select_related = [ \"instance_client\" , \"mastodon_avatar\" ] template_name = \"post_later/mastodon/mastodon_account_delete.html\" permission_required = \"post_later.delete_mastodonuserauth\" context_object_name = \"userauth\" def get_success_url ( self ): return reverse_lazy ( \"post_later:mastodon_account_list\" )","title":"MastodonAccountDeleteView"}]}